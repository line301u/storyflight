import { rollupPluginAstroBuildHTML } from "../../vite-plugin-build-html/index.js";
import { rollupPluginAstroBuildCSS } from "../../vite-plugin-build-css/index.js";
import fs from "fs";
import * as colors from "kleur/colors";
import { performance } from "perf_hooks";
import vite from "../vite.js";
import { fileURLToPath } from "url";
import { createVite } from "../create-vite.js";
import { debug, defaultLogOptions, info, levels, timerMessage, warn } from "../logger.js";
import { preload as ssrPreload } from "../ssr/index.js";
import { generatePaginateFunction } from "../ssr/paginate.js";
import { createRouteManifest, validateGetStaticPathsModule, validateGetStaticPathsResult } from "../ssr/routing.js";
import { generateRssFunction } from "../ssr/rss.js";
import { generateSitemap } from "../ssr/sitemap.js";
async function build(config, options = { logging: defaultLogOptions }) {
  const builder = new AstroBuilder(config, options);
  await builder.build();
}
class AstroBuilder {
  constructor(config, options) {
    this.mode = "production";
    this.routeCache = {};
    if (!config.buildOptions.site && config.buildOptions.sitemap !== false) {
      warn(options.logging, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
    }
    if (options.mode)
      this.mode = options.mode;
    this.config = config;
    const port = config.devOptions.port;
    this.logging = options.logging;
    this.origin = config.buildOptions.site ? new URL(config.buildOptions.site).origin : `http://localhost:${port}`;
    this.manifest = createRouteManifest({ config }, this.logging);
  }
  async build() {
    const { logging, origin } = this;
    const timer = {};
    timer.init = performance.now();
    timer.viteStart = performance.now();
    const viteConfig = await createVite(vite.mergeConfig({
      mode: this.mode,
      server: {
        hmr: { overlay: false },
        middlewareMode: "ssr"
      }
    }, this.config.vite || {}), { astroConfig: this.config, logging });
    this.viteConfig = viteConfig;
    const viteServer = await vite.createServer(viteConfig);
    this.viteServer = viteServer;
    debug(logging, "build", timerMessage("Vite started", timer.viteStart));
    timer.loadStart = performance.now();
    const assets = {};
    const allPages = {};
    await Promise.all(this.manifest.routes.map(async (route) => {
      var _a;
      if (route.pathname) {
        allPages[route.component] = {
          route,
          paths: [route.pathname],
          preload: await ssrPreload({
            astroConfig: this.config,
            filePath: new URL(`./${route.component}`, this.config.projectRoot),
            logging,
            mode: "production",
            origin,
            pathname: route.pathname,
            route,
            routeCache: this.routeCache,
            viteServer
          }).then((routes) => {
            const html = `${route.pathname}`.replace(/\/?$/, "/index.html");
            debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.yellow(html)}`);
            return routes;
          }).catch((err) => {
            debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2718"))} ${route.component}`);
            throw err;
          })
        };
        return;
      }
      const result = await this.getStaticPathsForRoute(route).then((routes) => {
        const label = routes.paths.length === 1 ? "page" : "pages";
        debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.magenta(`[${routes.paths.length} ${label}]`)}`);
        return routes;
      }).catch((err) => {
        debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2717"))} ${route.component}`);
        throw err;
      });
      if ((_a = result.rss) == null ? void 0 : _a.xml) {
        const rssFile = new URL(result.rss.url.replace(/^\/?/, "./"), this.config.dist);
        if (assets[fileURLToPath(rssFile)]) {
          throw new Error(`[getStaticPaths] RSS feed ${result.rss.url} already exists.
Use \`rss(data, {url: '...'})\` to choose a unique, custom URL. (${route.component})`);
        }
        assets[fileURLToPath(rssFile)] = result.rss.xml;
      }
      allPages[route.component] = {
        route,
        paths: result.paths,
        preload: await ssrPreload({
          astroConfig: this.config,
          filePath: new URL(`./${route.component}`, this.config.projectRoot),
          logging,
          mode: "production",
          origin,
          pathname: result.paths[0],
          route,
          routeCache: this.routeCache,
          viteServer
        })
      };
    }));
    debug(logging, "build", timerMessage("All pages loaded", timer.loadStart));
    const pureCSSChunks = new Set();
    const chunkToReferenceIdMap = new Map();
    const astroStyleMap = new Map();
    const astroPageStyleMap = new Map();
    const pageNames = [];
    timer.buildStart = performance.now();
    await vite.build({
      logLevel: "error",
      mode: "production",
      build: {
        emptyOutDir: true,
        minify: "esbuild",
        outDir: fileURLToPath(this.config.dist),
        rollupOptions: {
          input: [],
          output: { format: "esm" }
        },
        target: "es2020"
      },
      plugins: [
        rollupPluginAstroBuildHTML({
          astroConfig: this.config,
          astroPageStyleMap,
          astroStyleMap,
          chunkToReferenceIdMap,
          pureCSSChunks,
          logging,
          origin,
          allPages,
          pageNames,
          routeCache: this.routeCache,
          viteServer
        }),
        rollupPluginAstroBuildCSS({
          astroPageStyleMap,
          astroStyleMap,
          chunkToReferenceIdMap,
          pureCSSChunks
        }),
        ...viteConfig.plugins || []
      ],
      publicDir: viteConfig.publicDir,
      root: viteConfig.root,
      envPrefix: "PUBLIC_",
      server: viteConfig.server,
      base: this.config.buildOptions.site ? new URL(this.config.buildOptions.site).pathname : "/"
    });
    debug(logging, "build", timerMessage("Vite build finished", timer.buildStart));
    timer.assetsStart = performance.now();
    Object.keys(assets).map((k) => {
      if (!assets[k])
        return;
      const filePath = new URL(`file://${k}`);
      fs.mkdirSync(new URL("./", filePath), { recursive: true });
      fs.writeFileSync(filePath, assets[k], "utf8");
      delete assets[k];
    });
    debug(logging, "build", timerMessage("Additional assets copied", timer.assetsStart));
    timer.sitemapStart = performance.now();
    if (this.config.buildOptions.sitemap && this.config.buildOptions.site) {
      const sitemap = generateSitemap(pageNames.map((pageName) => new URL(`/${pageName}`, this.config.buildOptions.site).href));
      const sitemapPath = new URL("./sitemap.xml", this.config.dist);
      await fs.promises.mkdir(new URL("./", sitemapPath), { recursive: true });
      await fs.promises.writeFile(sitemapPath, sitemap, "utf8");
    }
    debug(logging, "build", timerMessage("Sitemap built", timer.sitemapStart));
    await viteServer.close();
    if (logging.level && levels[logging.level] <= levels["info"]) {
      await this.printStats({ logging, timeStart: timer.init, pageCount: pageNames.length });
    }
  }
  async getStaticPathsForRoute(route) {
    if (!this.viteServer)
      throw new Error(`vite.createServer() not called!`);
    const filePath = new URL(`./${route.component}`, this.config.projectRoot);
    const mod = await this.viteServer.ssrLoadModule(fileURLToPath(filePath));
    validateGetStaticPathsModule(mod);
    const rss = generateRssFunction(this.config.buildOptions.site, route);
    const staticPaths = (await mod.getStaticPaths({ paginate: generatePaginateFunction(route), rss: rss.generator })).flat();
    this.routeCache[route.component] = staticPaths;
    validateGetStaticPathsResult(staticPaths, this.logging);
    return {
      paths: staticPaths.map((staticPath) => staticPath.params && route.generate(staticPath.params)).filter(Boolean),
      rss: rss.rss
    };
  }
  async printStats({ logging, timeStart, pageCount }) {
    debug(logging, "");
    const buildTime = performance.now() - timeStart;
    const total = buildTime < 750 ? `${Math.round(buildTime)}ms` : `${(buildTime / 1e3).toFixed(2)}s`;
    const perPage = `${Math.round(buildTime / pageCount)}ms`;
    info(logging, "build", `${pageCount} pages built in ${colors.bold(total)} ${colors.dim(`(${perPage}/page)`)}`);
    info(logging, "build", `\u{1F680} ${colors.cyan(colors.bold("Done"))}`);
  }
}
export {
  build as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvYnVpbGQvaW5kZXgudHMiXSwKICAibWFwcGluZ3MiOiAiQUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUEscUJBQW9DLFFBQXFCLFVBQXdCLEVBQUUsU0FBUyxxQkFBb0M7QUFDOUgsUUFBTSxVQUFVLElBQUksYUFBYSxRQUFRO0FBQ3pDLFFBQU0sUUFBUTtBQUFBO0FBR2hCLG1CQUFtQjtBQUFBLEVBVWpCLFlBQVksUUFBcUIsU0FBdUI7QUFQaEQsZ0JBQU87QUFFUCxzQkFBeUI7QUFNL0IsUUFBSSxDQUFDLE9BQU8sYUFBYSxRQUFRLE9BQU8sYUFBYSxZQUFZLE9BQU87QUFDdEUsV0FBSyxRQUFRLFNBQVMsVUFBVTtBQUFBO0FBR2xDLFFBQUksUUFBUTtBQUFNLFdBQUssT0FBTyxRQUFRO0FBQ3RDLFNBQUssU0FBUztBQUNkLFVBQU0sT0FBTyxPQUFPLFdBQVc7QUFDL0IsU0FBSyxVQUFVLFFBQVE7QUFDdkIsU0FBSyxTQUFTLE9BQU8sYUFBYSxPQUFPLElBQUksSUFBSSxPQUFPLGFBQWEsTUFBTSxTQUFTLG9CQUFvQjtBQUN4RyxTQUFLLFdBQVcsb0JBQW9CLEVBQUUsVUFBVSxLQUFLO0FBQUE7QUFBQSxRQUdqRCxRQUFRO0FBQ1osVUFBTSxFQUFFLFNBQVMsV0FBVztBQUM1QixVQUFNLFFBQWdDO0FBQ3RDLFVBQU0sT0FBTyxZQUFZO0FBQ3pCLFVBQU0sWUFBWSxZQUFZO0FBQzlCLFVBQU0sYUFBYSxNQUFNLFdBQ3ZCLEtBQUssWUFDSDtBQUFBLE1BQ0UsTUFBTSxLQUFLO0FBQUEsTUFDWCxRQUFRO0FBQUEsUUFDTixLQUFLLEVBQUUsU0FBUztBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBO0FBQUEsT0FHcEIsS0FBSyxPQUFPLFFBQVEsS0FFdEIsRUFBRSxhQUFhLEtBQUssUUFBUTtBQUU5QixTQUFLLGFBQWE7QUFDbEIsVUFB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QyxhQUFhLElBQUksSUFBSSxJQUFJLFlBQVksS0FBSyxPQUFPLGFBQWEsTUFBTTtBQUNuSCxZQUFNLGNBQWMsSUFBSSxJQUFJLGlCQUFpQixLQUFLLE9BQU87QUFDekQsWUFBTSxHQUFHLFNBQVMsTUFBTSxJQUFJLElBQUksTUFBTSxjQUFjLEVBQUUsV0FBVztBQUNqRSxZQUFNLEdBQUcsU0FBUyxVQUFVLGFBQWEsU0FBUztBQUFBO0FBRXBELFVBQU0sU0FBUyxTQUFTLGFBQWEsaUJBQWlCLE1BQU07QUFHNUQsVUFBTSxXQUFXO0FBQ2pCLFFBQUksUUFBUSxTQUFTLE9BQU8sUUFBUSxVQUFVLE9BQU8sU0FBUztBQUM1RCxZQUFNLEtBQUssV0FBVyxFQUFFLFNBQVMsV0FBVyxNQUFNLE1BQU0sV0FBVyxVQUFVO0FBQUE7QUFBQTtBQUFBLFFBS25FLHVCQUF1QixPQUFpRTtBQUNwRyxRQUFJLENBQUMsS0FBSztBQUFZLFlBQU0sSUFBSSxNQUFNO0FBQ3RDLFVBQU0sV0FBVyxJQUFJLElBQUksS0FBSyxNQUFNLGFBQWEsS0FBSyxPQUFPO0FBQzdELFVBQU0sTUFBTyxNQUFNLEtBQUssV0FBVyxjQUFjLGNBQWM7QUFDL0QsaUNBQTZCO0FBQzdCLFVBQU0sTUFBTSxvQkFBb0IsS0FBSyxPQUFPLGFBQWEsTUFBTTtBQUMvRCxVQUFNLGNBQXFDLE9BQU0sSUFBSSxlQUFnQixFQUFFLFVBQVUseUJBQXlCLFFBQVEsS0FBSyxJQUFJLGNBQWM7QUFDekksU0FBSyxXQUFXLE1BQU0sYUFBYTtBQUNuQyxpQ0FBNkIsYUFBYSxLQUFLO0FBQy9DLFdBQU87QUFBQSxNQUNMLE9BQU8sWUFBWSxJQUFJLENBQUMsZUFBZSxXQUFXLFVBQVUsTUFBTSxTQUFTLFdBQVcsU0FBUyxPQUFPO0FBQUEsTUFDdEcsS0FBSyxJQUFJO0FBQUE7QUFBQTtBQUFBLFFBS0MsV0FBVyxFQUFFLFNBQVMsV0FBVyxhQUE0RTtBQUV6SCxVQUFNLFNBQVM7QUFDZixVQUFNLFlBQVksWUFBWSxRQUFRO0FBQ3RDLFVBQU0sUUFBUSxZQUFZLE1BQU0sR0FBRyxLQUFLLE1BQU0saUJBQWlCLEdBQUksYUFBWSxLQUFNLFFBQVE7QUFDN0YsVUFBTSxVQUFVLEdBQUcsS0FBSyxNQUFNLFlBQVk7QUFDMUMsU0FBSyxTQUFTLFNBQVMsR0FBRyw0QkFBNEIsT0FBTyxLQUFLLFVBQVUsT0FBTyxJQUFJLElBQUk7QUFDM0YsU0FBSyxTQUFTLFNBQVMsYUFBTSxPQUFPLEtBQUssT0FBTyxLQUFLO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
