import eol from "eol";
import path from "path";
import slash from "slash";
import { fileURLToPath, pathToFileURL } from "url";
import resolve from "resolve";
function canonicalURL(url, base) {
  let pathname = url.replace(/\/index.html$/, "");
  pathname = pathname.replace(/\/1\/?$/, "");
  if (!path.extname(pathname))
    pathname = pathname.replace(/(\/+)?$/, "/");
  pathname = pathname.replace(/\/+/g, "/");
  return new URL(pathname, base);
}
function parseNpmName(spec) {
  if (!spec || spec[0] === "." || spec[0] === "/")
    return void 0;
  let scope;
  let name = "";
  let parts = spec.split("/");
  if (parts[0][0] === "@") {
    scope = parts[0];
    name = parts.shift() + "/";
  }
  name += parts.shift();
  let subpath = parts.length ? `./${parts.join("/")}` : void 0;
  return {
    scope,
    name,
    subpath
  };
}
function codeFrame(src, loc) {
  if (!loc)
    return "";
  const lines = eol.lf(src).split("\n");
  const visibleLines = [];
  for (let n = -2; n <= 2; n++) {
    if (lines[loc.line + n])
      visibleLines.push(loc.line + n);
  }
  let gutterWidth = 0;
  for (const lineNo of visibleLines) {
    let w = `> ${lineNo}`;
    if (w.length > gutterWidth)
      gutterWidth = w.length;
  }
  let output = "";
  for (const lineNo of visibleLines) {
    const isFocusedLine = lineNo === loc.line - 1;
    output += isFocusedLine ? "> " : "  ";
    output += `${lineNo + 1} | ${lines[lineNo]}
`;
    if (isFocusedLine)
      output += `${[...new Array(gutterWidth)].join(" ")}  | ${[...new Array(loc.column)].join(" ")}^
`;
  }
  return output;
}
function resolveDependency(dep, astroConfig) {
  const resolved = resolve.sync(dep, {
    basedir: fileURLToPath(astroConfig.projectRoot)
  });
  return pathToFileURL(resolved).toString();
}
function viteifyURL(filePath) {
  return `/@fs${slash(fileURLToPath(filePath)).replace(/^\/?/, "/")}`;
}
export {
  canonicalURL,
  codeFrame,
  parseNpmName,
  resolveDependency,
  viteifyURL
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvdXRpbC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHTyxzQkFBc0IsS0FBYSxNQUFvQjtBQUM1RCxNQUFJLFdBQVcsSUFBSSxRQUFRLGlCQUFpQjtBQUM1QyxhQUFXLFNBQVMsUUFBUSxXQUFXO0FBQ3ZDLE1BQUksQ0FBQyxLQUFLLFFBQVE7QUFBVyxlQUFXLFNBQVMsUUFBUSxXQUFXO0FBQ3BFLGFBQVcsU0FBUyxRQUFRLFFBQVE7QUFDcEMsU0FBTyxJQUFJLElBQUksVUFBVTtBQUFBO0FBSXBCLHNCQUFzQixNQUE4RTtBQUV6RyxNQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sT0FBTyxLQUFLLE9BQU87QUFBSyxXQUFPO0FBRXhELE1BQUk7QUFDSixNQUFJLE9BQU87QUFFWCxNQUFJLFFBQVEsS0FBSyxNQUFNO0FBQ3ZCLE1BQUksTUFBTSxHQUFHLE9BQU8sS0FBSztBQUN2QixZQUFRLE1BQU07QUFDZCxXQUFPLE1BQU0sVUFBVTtBQUFBO0FBRXpCLFVBQVEsTUFBTTtBQUVkLE1BQUksVUFBVSxNQUFNLFNBQVMsS0FBSyxNQUFNLEtBQUssU0FBUztBQUV0RCxTQUFPO0FBQUEsSUFDTDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUE7QUFBQTtBQUtHLG1CQUFtQixLQUFhLEtBQXlDO0FBQzlFLE1BQUksQ0FBQztBQUFLLFdBQU87QUFDakIsUUFBTSxRQUFRLElBQUksR0FBRyxLQUFLLE1BQU07QUFFaEMsUUFBTSxlQUFlO0FBQ3JCLFdBQVMsSUFBSSxJQUFJLEtBQUssR0FBRyxLQUFLO0FBQzVCLFFBQUksTUFBTSxJQUFJLE9BQU87QUFBSSxtQkFBYSxLQUFLLElBQUksT0FBTztBQUFBO0FBR3hELE1BQUksY0FBYztBQUNsQixhQUFXLFVBQVUsY0FBYztBQUNqQyxRQUFJLElBQUksS0FBSztBQUNiLFFBQUksRUFBRSxTQUFTO0FBQWEsb0JBQWMsRUFBRTtBQUFBO0FBRzlDLE1BQUksU0FBUztBQUNiLGFBQVcsVUFBVSxjQUFjO0FBQ2pDLFVBQU0sZ0JBQWdCLFdBQVcsSUFBSSxPQUFPO0FBQzVDLGNBQVUsZ0JBQWdCLE9BQU87QUFDakMsY0FBVSxHQUFHLFNBQVMsT0FBTyxNQUFNO0FBQUE7QUFDbkMsUUFBSTtBQUFlLGdCQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksTUFBTSxjQUFjLEtBQUssV0FBVyxDQUFDLEdBQUcsSUFBSSxNQUFNLElBQUksU0FBUyxLQUFLO0FBQUE7QUFBQTtBQUU5RyxTQUFPO0FBQUE7QUFHRiwyQkFBMkIsS0FBYSxhQUEwQjtBQUN2RSxRQUFNLFdBQVcsUUFBUSxLQUFLLEtBQUs7QUFBQSxJQUNqQyxTQUFTLGNBQWMsWUFBWTtBQUFBO0FBR3JDLFNBQU8sY0FBYyxVQUFVO0FBQUE7QUFVMUIsb0JBQW9CLFVBQXVCO0FBQ2hELFNBQU8sT0FBTyxNQUFNLGNBQWMsV0FBVyxRQUFRLFFBQVE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
