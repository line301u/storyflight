import { builtinModules } from "module";
import { fileURLToPath } from "url";
import vite from "./vite.js";
import astroVitePlugin from "../vite-plugin-astro/index.js";
import astroPostprocessVitePlugin from "../vite-plugin-astro-postprocess/index.js";
import configAliasVitePlugin from "../vite-plugin-config-alias/index.js";
import markdownVitePlugin from "../vite-plugin-markdown/index.js";
import jsxVitePlugin from "../vite-plugin-jsx/index.js";
import fetchVitePlugin from "../vite-plugin-fetch/index.js";
import { resolveDependency } from "./util.js";
const ALWAYS_EXTERNAL = new Set([
  ...builtinModules.map((name) => `node:${name}`),
  "@sveltejs/vite-plugin-svelte",
  "estree-util-value-to-estree",
  "micromark-util-events-to-acorn",
  "node-fetch",
  "prismjs",
  "shiki",
  "shorthash",
  "unified",
  "whatwg-url"
]);
const ALWAYS_NOEXTERNAL = new Set([
  "astro"
]);
async function createVite(inlineConfig, { astroConfig, logging, devServer }) {
  let viteConfig = {
    cacheDir: fileURLToPath(new URL("./node_modules/.vite/", astroConfig.projectRoot)),
    clearScreen: false,
    logLevel: "error",
    optimizeDeps: {
      entries: ["src/**/*"]
    },
    plugins: [
      configAliasVitePlugin({ config: astroConfig }),
      astroVitePlugin({ config: astroConfig, devServer }),
      markdownVitePlugin({ config: astroConfig, devServer }),
      jsxVitePlugin({ config: astroConfig, logging }),
      astroPostprocessVitePlugin({ config: astroConfig, devServer }),
      fetchVitePlugin()
    ],
    publicDir: fileURLToPath(astroConfig.public),
    root: fileURLToPath(astroConfig.projectRoot),
    envPrefix: "PUBLIC_",
    server: {
      force: true,
      hmr: process.env.NODE_ENV === "test" || process.env.NODE_ENV === "production" ? false : void 0,
      proxy: {}
    },
    ssr: {
      external: [...ALWAYS_EXTERNAL],
      noExternal: [...ALWAYS_NOEXTERNAL]
    }
  };
  for (const name of astroConfig.renderers) {
    try {
      const { default: renderer } = await import(resolveDependency(name, astroConfig));
      if (!renderer)
        continue;
      if (renderer.viteConfig) {
        if (typeof renderer.viteConfig !== "function") {
          throw new Error(`${name}: viteConfig(options) must be a function! Got ${typeof renderer.viteConfig}.`);
        }
        const rendererConfig = await renderer.viteConfig({ mode: inlineConfig.mode, command: inlineConfig.mode === "production" ? "build" : "serve" });
        viteConfig = vite.mergeConfig(viteConfig, rendererConfig);
      }
    } catch (err) {
      throw new Error(`${name}: ${err}`);
    }
  }
  viteConfig = vite.mergeConfig(viteConfig, astroConfig.vite || {});
  viteConfig = vite.mergeConfig(viteConfig, inlineConfig);
  return viteConfig;
}
export {
  createVite
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvY3JlYXRlLXZpdGUudHMiXSwKICAibWFwcGluZ3MiOiAiQUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLE1BQU0sa0JBQWtCLElBQUksSUFBSTtBQUFBLEVBQzlCLEdBQUcsZUFBZSxJQUFJLENBQUMsU0FBUyxRQUFRO0FBQUEsRUFDeEM7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBO0FBRUYsTUFBTSxvQkFBb0IsSUFBSSxJQUFJO0FBQUEsRUFDaEM7QUFBQTtBQWFGLDBCQUFpQyxjQUFpQyxFQUFFLGFBQWEsU0FBUyxhQUE0RDtBQUVwSixNQUFJLGFBQWdDO0FBQUEsSUFDbEMsVUFBVSxjQUFjLElBQUksSUFBSSx5QkFBeUIsWUFBWTtBQUFBLElBQ3JFLGFBQWE7QUFBQSxJQUNiLFVBQVU7QUFBQSxJQUNWLGNBQWM7QUFBQSxNQUNaLFNBQVMsQ0FBQztBQUFBO0FBQUEsSUFFWixTQUFTO0FBQUEsTUFDUCxzQkFBc0IsRUFBRSxRQUFRO0FBQUEsTUFDaEMsZ0JBQWdCLEVBQUUsUUFBUSxhQUFhO0FBQUEsTUFDdkMsbUJBQW1CLEVBQUUsUUFBUSxhQUFhO0FBQUEsTUFDMUMsY0FBYyxFQUFFLFFBQVEsYUFBYTtBQUFBLE1BQ3JDLDJCQUEyQixFQUFFLFFBQVEsYUFBYTtBQUFBLE1BQ2xEO0FBQUE7QUFBQSxJQUVGLFdBQVcsY0FBYyxZQUFZO0FBQUEsSUFDckMsTUFBTSxjQUFjLFlBQVk7QUFBQSxJQUNoQyxXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxLQUFLLFFBQVEsSUFBSSxhQUFhLFVBQVUsUUFBUSxJQUFJLGFBQWEsZUFBZSxRQUFRO0FBQUEsTUFFeEYsT0FBTztBQUFBO0FBQUEsSUFLVCxLQUFLO0FBQUEsTUFDSCxVQUFVLENBQUMsR0FBRztBQUFBLE1BQ2QsWUFBWSxDQUFDLEdBQUc7QUFBQTtBQUFBO0FBS3BCLGFBQVcsUUFBUSxZQUFZLFdBQVc7QUFDeEMsUUFBSTtBQUNGLFlBQU0sRUFBRSxTQUFTLGFBQWEsTUFBTSxPQUFPLGtCQUFrQixNQUFNO0FBQ25FLFVBQUksQ0FBQztBQUFVO0FBRWYsVUFBSSxTQUFTLFlBQVk7QUFDdkIsWUFBSSxPQUFPLFNBQVMsZUFBZSxZQUFZO0FBQzdDLGdCQUFNLElBQUksTUFBTSxHQUFHLHFEQUFxRCxPQUFPLFNBQVM7QUFBQTtBQUUxRixjQUFNLGlCQUFpQixNQUFNLFNBQVMsV0FBVyxFQUFFLE1BQU0sYUFBYSxNQUFNLFNBQVMsYUFBYSxTQUFTLGVBQWUsVUFBVTtBQUNwSSxxQkFBYSxLQUFLLFlBQVksWUFBWTtBQUFBO0FBQUEsYUFFckMsS0FBUDtBQUNBLFlBQU0sSUFBSSxNQUFNLEdBQUcsU0FBUztBQUFBO0FBQUE7QUFLaEMsZUFBYSxLQUFLLFlBQVksWUFBWSxZQUFZLFFBQVE7QUFDOUQsZUFBYSxLQUFLLFlBQVksWUFBWTtBQUMxQyxTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
