import * as colors from "kleur/colors";
import path from "path";
import { pathToFileURL, fileURLToPath } from "url";
import { z } from "zod";
import load from "@proload/core";
import loadTypeScript from "@proload/plugin-tsm";
load.use([loadTypeScript]);
const AstroConfigSchema = z.object({
  projectRoot: z.string().optional().default(".").transform((val) => new URL(val)),
  src: z.string().optional().default("./src").transform((val) => new URL(val)),
  pages: z.string().optional().default("./src/pages").transform((val) => new URL(val)),
  layouts: z.string().optional().default("./src/layouts").transform((val) => new URL(val)),
  public: z.string().optional().default("./public").transform((val) => new URL(val)),
  dist: z.string().optional().default("./dist").transform((val) => new URL(val)),
  renderers: z.array(z.string()).optional().default(["@astrojs/renderer-svelte", "@astrojs/renderer-vue", "@astrojs/renderer-react", "@astrojs/renderer-preact"]),
  markdownOptions: z.object({
    footnotes: z.boolean().optional(),
    gfm: z.boolean().optional(),
    render: z.any().optional().default(["@astrojs/markdown-remark", {}])
  }).strict().optional().default({}),
  buildOptions: z.object({
    site: z.string().optional(),
    sitemap: z.boolean().optional().default(true),
    pageUrlFormat: z.union([z.literal("file"), z.literal("directory")]).optional().default("directory")
  }).optional().default({}),
  devOptions: z.object({
    hostname: z.string().optional().default("localhost"),
    port: z.number().optional().default(3e3),
    trailingSlash: z.union([z.literal("always"), z.literal("never"), z.literal("ignore")]).optional().default("ignore")
  }).optional().default({}),
  vite: z.any().optional().default({})
});
async function validateConfig(userConfig, root) {
  const fileProtocolRoot = pathToFileURL(root + path.sep);
  const AstroConfigRelativeSchema = AstroConfigSchema.extend({
    projectRoot: z.string().default(".").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    src: z.string().default("./src").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    pages: z.string().default("./src/pages").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    layouts: z.string().default("./src/layouts").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    public: z.string().default("./public").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    dist: z.string().default("./dist").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot))
  });
  return AstroConfigRelativeSchema.parseAsync(userConfig);
}
function addTrailingSlash(str) {
  return str.replace(/\/*$/, "/");
}
async function loadConfig(options) {
  const root = options.cwd ? path.resolve(options.cwd) : process.cwd();
  let userConfig = {};
  let userConfigPath;
  if (options.filename) {
    userConfigPath = /^\.*\//.test(options.filename) ? options.filename : `./${options.filename}`;
    userConfigPath = fileURLToPath(new URL(userConfigPath, `file://${root}/`));
  }
  const config = await load("astro", { mustExist: false, cwd: root, filePath: userConfigPath });
  if (config) {
    userConfig = config.value;
  }
  return validateConfig(userConfig, root);
}
function formatConfigError(err) {
  const errorList = err.issues.map((issue) => `  ! ${colors.bold(issue.path.join("."))}  ${colors.red(issue.message + ".")}`);
  return `${colors.red("[config]")} Astro found issue(s) with your configuration:
${errorList.join("\n")}`;
}
export {
  AstroConfigSchema,
  formatConfigError,
  loadConfig,
  validateConfig
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvY29uZmlnLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsS0FBSyxJQUFJLENBQUM7QUFFSCxNQUFNLG9CQUFvQixFQUFFLE9BQU87QUFBQSxFQUN4QyxhQUFhLEVBQ1YsU0FDQSxXQUNBLFFBQVEsS0FDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM5QixLQUFLLEVBQ0YsU0FDQSxXQUNBLFFBQVEsU0FDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM5QixPQUFPLEVBQ0osU0FDQSxXQUNBLFFBQVEsZUFDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM5QixTQUFTLEVBQ04sU0FDQSxXQUNBLFFBQVEsaUJBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDOUIsUUFBUSxFQUNMLFNBQ0EsV0FDQSxRQUFRLFlBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDOUIsTUFBTSxFQUNILFNBQ0EsV0FDQSxRQUFRLFVBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDOUIsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLFdBQVcsUUFBUSxDQUFDLDRCQUE0Qix5QkFBeUIsMkJBQTJCO0FBQUEsRUFDbkksaUJBQWlCLEVBQ2QsT0FBTztBQUFBLElBQ04sV0FBVyxFQUFFLFVBQVU7QUFBQSxJQUN2QixLQUFLLEVBQUUsVUFBVTtBQUFBLElBQ2pCLFFBQVEsRUFBRSxNQUFNLFdBQVcsUUFBUSxDQUFDLDRCQUE0QjtBQUFBLEtBRWpFLFNBQ0EsV0FDQSxRQUFRO0FBQUEsRUFDWCxjQUFjLEVBQ1gsT0FBTztBQUFBLElBQ04sTUFBTSxFQUFFLFNBQVM7QUFBQSxJQUNqQixTQUFTLEVBQUUsVUFBVSxXQUFXLFFBQVE7QUFBQSxJQUN4QyxlQUFlLEVBQ1osTUFBTSxDQUFDLEVBQUUsUUFBUSxTQUFTLEVBQUUsUUFBUSxlQUNwQyxXQUNBLFFBQVE7QUFBQSxLQUVaLFdBQ0EsUUFBUTtBQUFBLEVBQ1gsWUFBWSxFQUNULE9BQU87QUFBQSxJQUNOLFVBQVUsRUFBRSxTQUFTLFdBQVcsUUFBUTtBQUFBLElBQ3hDLE1BQU0sRUFBRSxTQUFTLFdBQVcsUUFBUTtBQUFBLElBQ3BDLGVBQWUsRUFDWixNQUFNLENBQUMsRUFBRSxRQUFRLFdBQVcsRUFBRSxRQUFRLFVBQVUsRUFBRSxRQUFRLFlBQzFELFdBQ0EsUUFBUTtBQUFBLEtBRVosV0FDQSxRQUFRO0FBQUEsRUFDWCxNQUFNLEVBQUUsTUFBTSxXQUFXLFFBQVE7QUFBQTtBQUluQyw4QkFBcUMsWUFBaUIsTUFBb0M7QUFDeEYsUUFBTSxtQkFBbUIsY0FBYyxPQUFPLEtBQUs7QUFHbkQsUUFBTSw0QkFBNEIsa0JBQWtCLE9BQU87QUFBQSxJQUN6RCxhQUFhLEVBQ1YsU0FDQSxRQUFRLEtBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJLGlCQUFpQixNQUFNO0FBQUEsSUFDckQsS0FBSyxFQUNGLFNBQ0EsUUFBUSxTQUNSLFVBQVUsQ0FBQyxRQUFRLElBQUksSUFBSSxpQkFBaUIsTUFBTTtBQUFBLElBQ3JELE9BQU8sRUFDSixTQUNBLFFBQVEsZUFDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksaUJBQWlCLE1BQU07QUFBQSxJQUNyRCxTQUFTLEVBQ04sU0FDQSxRQUFRLGlCQUNSLFVBQVUsQ0FBQyxRQUFRLElBQUksSUFBSSxpQkFBaUIsTUFBTTtBQUFBLElBQ3JELFFBQVEsRUFDTCxTQUNBLFFBQVEsWUFDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksaUJBQWlCLE1BQU07QUFBQSxJQUNyRCxNQUFNLEVBQ0gsU0FDQSxRQUFRLFVBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJLGlCQUFpQixNQUFNO0FBQUE7QUFFdkQsU0FBTywwQkFBMEIsV0FBVztBQUFBO0FBSTlDLDBCQUEwQixLQUFxQjtBQUM3QyxTQUFPLElBQUksUUFBUSxRQUFRO0FBQUE7QUFTN0IsMEJBQWlDLFNBQWtEO0FBQ2pGLFFBQU0sT0FBTyxRQUFRLE1BQU0sS0FBSyxRQUFRLFFBQVEsT0FBTyxRQUFRO0FBQy9ELE1BQUksYUFBOEI7QUFDbEMsTUFBSTtBQUVKLE1BQUksUUFBUSxVQUFVO0FBQ3BCLHFCQUFpQixTQUFTLEtBQUssUUFBUSxZQUFZLFFBQVEsV0FBVyxLQUFLLFFBQVE7QUFDbkYscUJBQWlCLGNBQWMsSUFBSSxJQUFJLGdCQUFnQixVQUFVO0FBQUE7QUFJbkUsUUFBTSxTQUFTLE1BQU0sS0FBSyxTQUFTLEVBQUUsV0FBVyxPQUFPLEtBQUssTUFBTSxVQUFVO0FBQzVFLE1BQUksUUFBUTtBQUNWLGlCQUFhLE9BQU87QUFBQTtBQUd0QixTQUFPLGVBQWUsWUFBWTtBQUFBO0FBRzdCLDJCQUEyQixLQUFpQjtBQUNqRCxRQUFNLFlBQVksSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLE9BQU8sT0FBTyxLQUFLLE1BQU0sS0FBSyxLQUFLLFVBQVUsT0FBTyxJQUFJLE1BQU0sVUFBVTtBQUNwSCxTQUFPLEdBQUcsT0FBTyxJQUFJO0FBQUEsRUFBOEQsVUFBVSxLQUFLO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
