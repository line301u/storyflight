var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import eol from "eol";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { renderPage, renderSlot } from "../../runtime/server/index.js";
import { canonicalURL as getCanonicalURL, codeFrame, resolveDependency, viteifyURL } from "../util.js";
import { getStylesForURL } from "./css.js";
import { injectTags } from "./html.js";
import { generatePaginateFunction } from "./paginate.js";
import { getParams, validateGetStaticPathsModule, validateGetStaticPathsResult } from "./routing.js";
const svelteStylesRE = /svelte\?svelte&type=style/;
const cache = new Map();
async function resolveRenderer(viteServer, renderer, astroConfig) {
  const resolvedRenderer = {};
  const {
    default: { name, client, polyfills, hydrationPolyfills, server }
  } = await import(resolveDependency(renderer, astroConfig));
  resolvedRenderer.name = name;
  if (client)
    resolvedRenderer.source = path.posix.join(renderer, client);
  if (Array.isArray(hydrationPolyfills))
    resolvedRenderer.hydrationPolyfills = hydrationPolyfills.map((src) => path.posix.join(renderer, src));
  if (Array.isArray(polyfills))
    resolvedRenderer.polyfills = polyfills.map((src) => path.posix.join(renderer, src));
  const { url } = await viteServer.moduleGraph.ensureEntryFromUrl(path.posix.join(renderer, server));
  const { default: rendererSSR } = await viteServer.ssrLoadModule(url);
  resolvedRenderer.ssr = rendererSSR;
  const completedRenderer = resolvedRenderer;
  return completedRenderer;
}
async function resolveRenderers(viteServer, astroConfig) {
  const ids = astroConfig.renderers;
  const renderers = await Promise.all(ids.map((renderer) => {
    if (cache.has(renderer))
      return cache.get(renderer);
    let promise = resolveRenderer(viteServer, renderer, astroConfig);
    cache.set(renderer, promise);
    return promise;
  }));
  return renderers;
}
async function errorHandler(e, { viteServer, filePath }) {
  if (e.stack) {
    e.stack = eol.lf(e.stack);
  }
  if (e instanceof Error) {
    viteServer.ssrFixStacktrace(e);
  }
  if (Array.isArray(e.errors)) {
    const { location, pluginName, text } = e.errors[0];
    const err = e;
    if (location)
      err.loc = { file: location.file, line: location.line, column: location.column };
    let src = err.pluginCode;
    if (!src && err.id && fs.existsSync(err.id))
      src = await fs.promises.readFile(err.id, "utf8");
    if (!src)
      src = await fs.promises.readFile(filePath, "utf8");
    err.frame = codeFrame(src, err.loc);
    err.id = location == null ? void 0 : location.file;
    err.message = `${location == null ? void 0 : location.file}: ${text}
${err.frame}
`;
    if (pluginName)
      err.plugin = pluginName;
    throw err;
  }
  throw e;
}
async function preload({ astroConfig, filePath, viteServer }) {
  const renderers = await resolveRenderers(viteServer, astroConfig);
  const mod = await viteServer.ssrLoadModule(viteifyURL(filePath));
  return [renderers, mod];
}
async function render(renderers, mod, ssrOpts) {
  const { astroConfig, filePath, logging, mode, origin, pathname, route, routeCache, viteServer } = ssrOpts;
  let params = {};
  let pageProps = {};
  if (route && !route.pathname) {
    if (route.params.length) {
      const paramsMatch = route.pattern.exec(pathname);
      if (paramsMatch) {
        params = getParams(route.params)(paramsMatch);
      }
    }
    validateGetStaticPathsModule(mod);
    if (!routeCache[route.component]) {
      routeCache[route.component] = await (await mod.getStaticPaths({
        paginate: generatePaginateFunction(route),
        rss: () => {
        }
      })).flat();
    }
    validateGetStaticPathsResult(routeCache[route.component], logging);
    const routePathParams = routeCache[route.component];
    const matchedStaticPath = routePathParams.find(({ params: _params }) => JSON.stringify(_params) === JSON.stringify(params));
    if (!matchedStaticPath) {
      throw new Error(`[getStaticPaths] route pattern matched, but no matching static path found. (${pathname})`);
    }
    pageProps = __spreadValues({}, matchedStaticPath.props) || {};
  }
  const Component = await mod.default;
  if (!Component)
    throw new Error(`Expected an exported Astro component but received typeof ${typeof Component}`);
  if (!Component.isAstroComponentFactory)
    throw new Error(`Unable to SSR non-Astro component (${route == null ? void 0 : route.component})`);
  const result = {
    styles: new Set(),
    scripts: new Set(),
    createAstro(astroGlobal, props, slots) {
      const site = new URL(origin);
      const url = new URL("." + pathname, site);
      const canonicalURL = getCanonicalURL("." + pathname, astroConfig.buildOptions.site || origin);
      return {
        __proto__: astroGlobal,
        props,
        request: {
          canonicalURL,
          params,
          url
        },
        slots: Object.fromEntries(Object.entries(slots || {}).map(([slotName]) => [slotName, true])),
        privateRenderSlotDoNotUse(slotName) {
          return renderSlot(result, slots ? slots[slotName] : null);
        },
        async privateRenderMarkdownDoNotUse(content, opts) {
          let mdRender = astroConfig.markdownOptions.render;
          let renderOpts = {};
          if (Array.isArray(mdRender)) {
            renderOpts = mdRender[1];
            mdRender = mdRender[0];
          }
          if (typeof mdRender === "string") {
            ({ default: mdRender } = await import(mdRender));
          } else if (mdRender instanceof Promise) {
            ({ default: mdRender } = await mdRender);
          }
          const { code } = await mdRender(content, __spreadValues(__spreadValues({}, renderOpts), opts != null ? opts : {}));
          return code;
        }
      };
    },
    _metadata: {
      renderers,
      pathname
    }
  };
  let html = await renderPage(result, Component, pageProps, null);
  const tags = [];
  if (mode === "development") {
    tags.push({
      tag: "script",
      attrs: { type: "module" },
      children: await getHmrScript(),
      injectTo: "head"
    });
  }
  [...getStylesForURL(filePath, viteServer)].forEach((href) => {
    if (mode === "development" && svelteStylesRE.test(href)) {
      tags.push({
        tag: "script",
        attrs: { type: "module", src: href },
        injectTo: "head"
      });
    } else {
      tags.push({
        tag: "link",
        attrs: {
          rel: "stylesheet",
          href,
          "data-astro-injected": true
        },
        injectTo: "head"
      });
    }
  });
  html = injectTags(html, tags);
  if (mode === "development") {
    const relativeURL = filePath.href.replace(astroConfig.projectRoot.href, "/");
    html = await viteServer.transformIndexHtml(relativeURL, html, pathname);
  }
  if (!/<!doctype html/i.test(html)) {
    html = "<!DOCTYPE html>\n" + html;
  }
  return html;
}
let hmrScript;
async function getHmrScript() {
  if (hmrScript)
    return hmrScript;
  const filePath = fileURLToPath(new URL("../../runtime/client/hmr.js", import.meta.url));
  const content = await fs.promises.readFile(filePath);
  hmrScript = content.toString();
  return hmrScript;
}
async function ssr(ssrOpts) {
  try {
    const [renderers, mod] = await preload(ssrOpts);
    return await render(renderers, mod, ssrOpts);
  } catch (e) {
    await errorHandler(e, { viteServer: ssrOpts.viteServer, filePath: ssrOpts.filePath });
    throw e;
  }
}
export {
  preload,
  render,
  ssr
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvc3NyL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE1BQU0saUJBQWlCO0FBdUJ2QixNQUFNLFFBQVEsSUFBSTtBQUdsQiwrQkFBK0IsWUFBZ0MsVUFBa0IsYUFBMEI7QUFDekcsUUFBTSxtQkFBd0I7QUFJOUIsUUFBTTtBQUFBLElBQ0osU0FBUyxFQUFFLE1BQU0sUUFBUSxXQUFXLG9CQUFvQjtBQUFBLE1BQ3RELE1BQU0sT0FBTyxrQkFBa0IsVUFBVTtBQUU3QyxtQkFBaUIsT0FBTztBQUN4QixNQUFJO0FBQVEscUJBQWlCLFNBQVMsS0FBSyxNQUFNLEtBQUssVUFBVTtBQUNoRSxNQUFJLE1BQU0sUUFBUTtBQUFxQixxQkFBaUIscUJBQXFCLG1CQUFtQixJQUFJLENBQUMsUUFBZ0IsS0FBSyxNQUFNLEtBQUssVUFBVTtBQUMvSSxNQUFJLE1BQU0sUUFBUTtBQUFZLHFCQUFpQixZQUFZLFVBQVUsSUFBSSxDQUFDLFFBQWdCLEtBQUssTUFBTSxLQUFLLFVBQVU7QUFDcEgsUUFBTSxFQUFFLFFBQVEsTUFBTSxXQUFXLFlBQVksbUJBQW1CLEtBQUssTUFBTSxLQUFLLFVBQVU7QUFDMUYsUUFBTSxFQUFFLFNBQVMsZ0JBQWdCLE1BQU0sV0FBVyxjQUFjO0FBQ2hFLG1CQUFpQixNQUFNO0FBRXZCLFFBQU0sb0JBQThCO0FBQ3BDLFNBQU87QUFBQTtBQUdULGdDQUFnQyxZQUFnQyxhQUErQztBQUM3RyxRQUFNLE1BQWdCLFlBQVk7QUFDbEMsUUFBTSxZQUFZLE1BQU0sUUFBUSxJQUM5QixJQUFJLElBQUksQ0FBQyxhQUFhO0FBQ3BCLFFBQUksTUFBTSxJQUFJO0FBQVcsYUFBTyxNQUFNLElBQUk7QUFDMUMsUUFBSSxVQUFVLGdCQUFnQixZQUFZLFVBQVU7QUFDcEQsVUFBTSxJQUFJLFVB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
