import http from "http";
import { performance } from "perf_hooks";
import send from "send";
import { fileURLToPath } from "url";
import * as msg from "../dev/messages.js";
import { error, info } from "../logger.js";
import { subpathNotUsedTemplate } from "../dev/template/4xx.js";
async function preview(config, { logging }) {
  const startServerTime = performance.now();
  const base = config.buildOptions.site ? new URL(config.buildOptions.site).pathname : "/";
  const server = http.createServer((req, res) => {
    if (!req.url.startsWith(base)) {
      res.statusCode = 404;
      res.end(subpathNotUsedTemplate(base, req.url));
      return;
    }
    send(req, req.url.substr(base.length - 1), {
      root: fileURLToPath(config.dist)
    }).pipe(res);
  });
  let port = config.devOptions.port;
  const { hostname } = config.devOptions;
  let httpServer;
  function startServer(timerStart) {
    let showedPortTakenMsg = false;
    let showedListenMsg = false;
    return new Promise((resolve, reject) => {
      const listen = () => {
        httpServer = server.listen(port, hostname, () => {
          if (!showedListenMsg) {
            info(logging, "astro", msg.devStart({ startupTime: performance.now() - timerStart }));
            info(logging, "astro", msg.devHost({ host: `http://${hostname}:${port}${base}` }));
          }
          showedListenMsg = true;
          resolve();
        });
        httpServer == null ? void 0 : httpServer.on("error", onError);
      };
      const onError = (err) => {
        if (err.code && err.code === "EADDRINUSE") {
          if (!showedPortTakenMsg) {
            info(logging, "astro", msg.portInUse({ port }));
            showedPortTakenMsg = true;
          }
          port++;
          return listen();
        } else {
          error(logging, "astro", err.stack);
          httpServer == null ? void 0 : httpServer.removeListener("error", onError);
          reject(err);
        }
      };
      listen();
    });
  }
  await startServer(startServerTime);
  return {
    hostname,
    port,
    server: httpServer,
    stop: async () => {
      httpServer.close();
    }
  };
}
export {
  preview as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcHJldmlldy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBY0EsdUJBQXNDLFFBQXFCLEVBQUUsV0FBbUQ7QUFDOUcsUUFBTSxrQkFBa0IsWUFBWTtBQUNwQyxRQUFNLE9BQU8sT0FBTyxhQUFhLE9BQU8sSUFBSSxJQUFJLE9BQU8sYUFBYSxNQUFNLFdBQVc7QUFHckYsUUFBTSxTQUFTLEtBQUssYUFBYSxDQUFDLEtBQUssUUFBUTtBQUM3QyxRQUFJLENBQUMsSUFBSSxJQUFLLFdBQVcsT0FBTztBQUM5QixVQUFJLGFBQWE7QUFDakIsVUFBSSxJQUFJLHVCQUF1QixNQUFNLElBQUk7QUFDekM7QUFBQTtBQUdGLFNBQUssS0FBSyxJQUFJLElBQUssT0FBTyxLQUFLLFNBQVMsSUFBSTtBQUFBLE1BQzFDLE1BQU0sY0FBYyxPQUFPO0FBQUEsT0FDMUIsS0FBSztBQUFBO0FBR1YsTUFBSSxPQUFPLE9BQU8sV0FBVztBQUM3QixRQUFNLEVBQUUsYUFBYSxPQUFPO0FBQzVCLE1BQUk7QUFHSix1QkFBcUIsWUFBbUM7QUFDdEQsUUFBSSxxQkFBcUI7QUFDekIsUUFBSSxrQkFBa0I7QUFDdEIsV0FBTyxJQUFJLFFBQWMsQ0FBQyxTQUFTLFdBQVc7QUFDNUMsWUFBTSxTQUFTLE1BQU07QUFDbkIscUJBQWEsT0FBTyxPQUFPLE1BQU0sVUFBVSxNQUFNO0FBQy9DLGNBQUksQ0FBQyxpQkFBaUI7QUFDcEIsaUJBQUssU0FBUyxTQUFTLElBQUksU0FBUyxFQUFFLGFBQWEsWUFBWSxRQUFRO0FBQ3ZFLGlCQUFLLFNBQVMsU0FBUyxJQUFJLFFBQVEsRUFBRSxNQUFNLFVBQVUsWUFBWSxPQUFPO0FBQUE7QUFFMUUsNEJBQWtCO0FBQ2xCO0FBQUE7QUFFRixpREFBWSxHQUFHLFNBQVM7QUFBQTtBQUcxQixZQUFNLFVBQVUsQ0FBQyxRQUErQjtBQUM5QyxZQUFJLElBQUksUUFBUSxJQUFJLFNBQVMsY0FBYztBQUN6QyxjQUFJLENBQUMsb0JBQW9CO0FBQ3ZCLGlCQUFLLFNBQVMsU0FBUyxJQUFJLFVBQVUsRUFBRTtBQUN2QyxpQ0FBcUI7QUFBQTtBQUV2QjtBQUNBLGlCQUFPO0FBQUEsZUFDRjtBQUNMLGdCQUFNLFNBQVMsU0FBUyxJQUFJO0FBQzVCLG1EQUFZLGVBQWUsU0FBUztBQUNwQyxpQkFBTztBQUFBO0FBQUE7QUFJWDtBQUFBO0FBQUE7QUFLSixRQUFNLFlBQVk7QUFFbEIsU0FBTztBQUFBLElBQ0w7QUFBQSxJQUNBO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixNQUFNLFlBQVk7QUFDaEIsaUJBQVc7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
