var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import * as colors from "kleur/colors";
import fs from "fs";
import yargs from "yargs-parser";
import { z } from "zod";
import { defaultLogDestination } from "../core/logger.js";
import build from "../core/build/index.js";
import devServer from "../core/dev/index.js";
import preview from "../core/preview/index.js";
import { check } from "./check.js";
import { formatConfigError, loadConfig } from "../core/config.js";
function resolveArgs(flags) {
  const options = {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0,
    hostname: typeof flags.hostname === "string" ? flags.hostname : void 0
  };
  if (flags.version) {
    return { cmd: "version", options };
  } else if (flags.help) {
    return { cmd: "help", options };
  }
  const cmd = flags._[2];
  switch (cmd) {
    case "dev":
      return { cmd: "dev", options };
    case "build":
      return { cmd: "build", options };
    case "preview":
      return { cmd: "preview", options };
    case "check":
      return { cmd: "check", options };
    default:
      return { cmd: "help", options };
  }
}
function printHelp() {
  console.error(`  ${colors.bold("astro")} - Futuristic web development tool.
  ${colors.bold("Commands:")}
  astro dev             Run Astro in development mode.
  astro build           Build a pre-compiled production version of your site.
  astro preview         Preview your build locally before deploying.
  astro check           Check your project for errors.

  ${colors.bold("Flags:")}
  --config <path>       Specify the path to the Astro config file.
  --project-root <path> Specify the path to the project root folder.
  --no-sitemap          Disable sitemap generation (build only).
  --verbose             Enable verbose logging
  --silent              Disable logging
  --version             Show the version number and exit.
  --help                Show this help message.
`);
}
async function printVersion() {
  const pkg = JSON.parse(await fs.promises.readFile(new URL("../package.json", import.meta.url), "utf8"));
  console.error(pkg.version);
}
function mergeCLIFlags(astroConfig, flags) {
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.site === "string")
    astroConfig.buildOptions.site = flags.site;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
  if (typeof flags.hostname === "string")
    astroConfig.devOptions.hostname = flags.hostname;
}
async function cli(args) {
  const flags = yargs(args);
  const state = resolveArgs(flags);
  const options = __spreadValues({}, state.options);
  const projectRoot = options.projectRoot || flags._[3];
  let logging = {
    dest: defaultLogDestination,
    level: "info"
  };
  if (flags.verbose)
    logging.level = "debug";
  if (flags.silent)
    logging.level = "silent";
  let config;
  try {
    config = await loadConfig({ cwd: projectRoot, filename: options.config });
    mergeCLIFlags(config, options);
  } catch (err) {
    if (err instanceof z.ZodError) {
      console.log(formatConfigError(err));
    } else {
      console.error(colors.red(err.toString() || err));
    }
    process.exit(1);
  }
  switch (state.cmd) {
    case "help": {
      printHelp();
      process.exit(1);
      return;
    }
    case "version": {
      await printVersion();
      process.exit(0);
      return;
    }
    case "dev": {
      try {
        const server = await devServer(config, { logging });
        await new Promise(() => {
        });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "build": {
      try {
        await build(config, { logging });
        process.exit(0);
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "check": {
      const ret = await check(config);
      process.exit(ret);
      return;
    }
    case "preview": {
      try {
        await preview(config, { logging });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    default: {
      throw new Error(`Error running ${state.cmd}`);
    }
  }
}
function throwAndExit(err) {
  console.error(colors.red(err.toString() || err));
  process.exit(1);
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,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
