import esbuild from "esbuild";
import fs from "fs";
import { fileURLToPath } from "url";
import { transform } from "@astrojs/compiler";
import { getViteTransform, transformWithVite } from "./styles.js";
function isSSR(options) {
  if (options === void 0) {
    return false;
  }
  if (typeof options === "boolean") {
    return options;
  }
  if (typeof options == "object") {
    return !!options.ssr;
  }
  return false;
}
function astro({ config, devServer }) {
  let viteTransform;
  return {
    name: "@astrojs/vite-plugin-astro",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteTransform = getViteTransform(resolvedConfig);
    },
    async load(id, opts) {
      if (!id.endsWith(".astro")) {
        return null;
      }
      const normalizedID = fileURLToPath(new URL(`file://${id}`));
      const isPage = normalizedID.startsWith(fileURLToPath(config.pages)) || normalizedID.startsWith(fileURLToPath(config.layouts));
      let source = await fs.promises.readFile(id, "utf8");
      let tsResult;
      let cssTransformError;
      try {
        tsResult = await transform(source, {
          as: isPage ? "document" : "fragment",
          projectRoot: config.projectRoot.toString(),
          site: config.buildOptions.site,
          sourcefile: id,
          sourcemap: "both",
          internalURL: "astro/internal",
          preprocessStyle: async (value, attrs) => {
            const lang = `.${(attrs == null ? void 0 : attrs.lang) || "css"}`.toLowerCase();
            try {
              const result = await transformWithVite({ value, lang, id, transformHook: viteTransform, ssr: isSSR(opts) });
              let map2;
              if (!result)
                return null;
              if (result.map) {
                if (typeof result.map === "string") {
                  map2 = result.map;
                } else if (result.map.mappings) {
                  map2 = result.map.toString();
                }
              }
              return { code: result.code, map: map2 };
            } catch (err) {
              cssTransformError = err;
              return null;
            }
          }
        });
        if (cssTransformError)
          throw cssTransformError;
        const { code, map } = await esbuild.transform(tsResult.code, { loader: "ts", sourcemap: "external", sourcefile: id });
        return {
          code,
          map
        };
      } catch (err) {
        if (err.stack.includes("wasm-function")) {
          const search = new URLSearchParams({
            labels: "compiler",
            title: "\u{1F41B} BUG: `@astrojs/compiler` panic",
            body: `### Describe the Bug

\`@astrojs/compiler\` encountered an unrecoverable error when compiling the following file.

**${id.replace(fileURLToPath(config.projectRoot), "")}**
\`\`\`astro
${source}
\`\`\`
`
          });
          err.url = `https://github.com/withastro/astro/issues/new?${search.toString()}`;
          err.message = `Error: Uh oh, the Astro compiler encountered an unrecoverable error!

Please open
a GitHub issue using the link below:
${err.url}`;
          err.stack = `    at ${id}`;
        }
        throw err;
      }
    }
  };
}
export {
  astro as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVFBLGVBQWUsU0FBMEQ7QUFDdkUsTUFBSSxZQUFZLFFBQVc7QUFDekIsV0FBTztBQUFBO0FBRVQsTUFBSSxPQUFPLFlBQVksV0FBVztBQUNoQyxXQUFPO0FBQUE7QUFFVCxNQUFJLE9BQU8sV0FBVyxVQUFVO0FBQzlCLFdBQU8sQ0FBQyxDQUFDLFFBQVE7QUFBQTtBQUVuQixTQUFPO0FBQUE7QUFJTSxlQUFlLEVBQUUsUUFBUSxhQUE4QztBQUNwRixNQUFJO0FBQ0osU0FBTztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsZUFBZSxnQkFBZ0I7QUFDN0Isc0JBQWdCLGlCQUFpQjtBQUFBO0FBQUEsVUFHN0IsS0FBSyxJQUFJLE1BQU07QUFDbkIsVUFBSSxDQUFDLEdBQUcsU0FBUyxXQUFXO0FBQzFCLGVBQU87QUFBQTtBQUlULFlBQU0sZUFBZSxjQUFjLElBQUksSUFBSSxVQUFVO0FBQ3JELFlBQU0sU0FBUyxhQUFhLFdBQVcsY0FBYyxPQUFPLFdBQVcsYUFBYSxXQUFXLGNBQWMsT0FBTztBQUNwSCxVQUFJLFNBQVMsTUFBTSxHQUFHLFNBQVMsU0FBUyxJQUFJO0FBQzVDLFVBQUk7QUFDSixVQUFJO0FBRUosVUFBSTtBQUlGLG1CQUFXLE1BQU0sVUFBVSxRQUFRO0FBQUEsVUFDakMsSUFBSSxTQUFTLGFBQWE7QUFBQSxVQUMxQixhQUFhLE9BQU8sWUFBWTtBQUFBLFVBQ2hDLE1BQU0sT0FBTyxhQUFhO0FBQUEsVUFDMUIsWUFBWTtBQUFBLFVBQ1osV0FBVztBQUFBLFVBQ1gsYUFBYTtBQUFBLFVBQ2IsaUJBQWlCLE9BQU8sT0FBZSxVQUFrQztBQUN2RSxrQkFBTSxPQUFPLElBQUksZ0NBQU8sU0FBUSxRQUFRO0FBQ3hDLGdCQUFJO0FBQ0Ysb0JBQU0sU0FBUyxNQUFNLGtCQUFrQixFQUFFLE9BQU8sTUFBTSxJQUFJLGVBQWUsZUFBZSxLQUFLLE1BQU07QUFDbkcsa0JBQUk7QUFDSixrQkFBSSxDQUFDO0FBQVEsdUJBQU87QUFDcEIsa0JBQUksT0FBTyxLQUFLO0FBQ2Qsb0JBQUksT0FBTyxPQUFPLFFBQVEsVUFBVTtBQUNsQyx5QkFBTSxPQUFPO0FBQUEsMkJBQ0osT0FBTyxJQUFJLFVBQVU7QUFDOUIseUJBQU0sT0FBTyxJQUFJO0FBQUE7QUFBQTtBQUdyQixxQkFBTyxFQUFFLE1BQU0sT0FBTyxNQUFNO0FBQUEscUJBQ3JCLEtBQVA7QUFFQSxrQ0FBb0I7QUFDcEIscUJBQU87QUFBQTtBQUFBO0FBQUE7QUFNYixZQUFJO0FBQW1CLGdCQUFNO0FBRzdCLGNBQU0sRUFBRSxNQUFNLFFBQVEsTUFBTSxRQUFRLFVBQVUsU0FBUyxNQUFNLEVBQUUsUUFBUSxNQUFNLFdBQVcsWUFBWSxZQUFZO0FBRWhILGVBQU87QUFBQSxVQUNMO0FBQUEsVUFDQTtBQUFBO0FBQUEsZUFFSyxLQUFQO0FBRUEsWUFBSSxJQUFJLE1BQU0sU0FBUyxrQkFBa0I7QUFDdkMsZ0JBQU0sU0FBUyxJQUFJLGdCQUFnQjtBQUFBLFlBQ2pDLFFBQVE7QUFBQSxZQUNSLE9BQU87QUFBQSxZQUNQLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlkLEdBQUcsUUFBUSxjQUFjLE9BQU8sY0FBYztBQUFBO0FBQUEsRUFFaEQ7QUFBQTtBQUFBO0FBQUE7QUFJUSxjQUFJLE1BQU0saURBQWlELE9BQU87QUFDbEUsY0FBSSxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJdEIsSUFBSTtBQUVJLGNBQUksUUFBUSxVQUFVO0FBQUE7QUFHeEIsY0FBTTtBQUFBO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
